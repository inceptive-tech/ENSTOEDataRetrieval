//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.04.21 at 09:42:42 AM UTC 
//


package tech.inceptive.ai4czc.entsoedataretrieval.fetcher.xjc;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StandardMarketProductTypeList.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="StandardMarketProductTypeList"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="A01"/&gt;
 *     &lt;enumeration value="A02"/&gt;
 *     &lt;enumeration value="A03"/&gt;
 *     &lt;enumeration value="A04"/&gt;
 *     &lt;enumeration value="A05"/&gt;
 *     &lt;enumeration value="A06"/&gt;
 *     &lt;enumeration value="A07"/&gt;
 *     &lt;enumeration value="A08"/&gt;
 *     &lt;enumeration value="A09"/&gt;
 *     &lt;enumeration value="A10"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "StandardMarketProductTypeList", namespace = "urn:entsoe.eu:wgedi:codelists")
@XmlEnum
public enum StandardMarketProductTypeList {


    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Standard balancing product&lt;/Title&gt;
     *               &lt;Definition&gt;A harmonised balancing product defined by all TSOs for the exchange of balancing services.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A01")
    A_01("A01"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Specific balancing product&lt;/Title&gt;
     *               &lt;Definition&gt;A product different from a standard product.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A02")
    A_02("A02"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Product from integrated scheduling process&lt;/Title&gt;
     *               &lt;Definition&gt;From the EBGL Article 2 (19), means an iterative process that uses at least integrated scheduling process bids that contain commercial data, complex technical data of individual power generating facilities or demand facilities and explicitly includes the start-up characteristics, the latest control area adequacy analysis and the operational security limits as an input to the process.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A03")
    A_03("A03"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Local balancing product&lt;/Title&gt;
     *               &lt;Definition&gt;A balancing product that is neither standard nor specific. This type may be applicable only in the interim period until standard and specific products have been defined within the given scheduling area.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A04")
    A_04("A04"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Standard mFRR product eligible for scheduled activation&lt;/Title&gt;
     *               &lt;Definition&gt;Standard mFRR product eligible for scheduled activation.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A05")
    A_05("A05"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Standard mFRR product eligible for direct activation&lt;/Title&gt;
     *               &lt;Definition&gt;Standard mFRR product eligible for direct activation.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A06")
    A_06("A06"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Standard mFRR product eligible for direct and scheduled activation&lt;/Title&gt;
     *               &lt;Definition&gt;Standard mFRR product eligible for direct as well as scheduled activation.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A07")
    A_07("A07"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Market wide resource capacity mechanism&lt;/Title&gt;
     *               &lt;Definition&gt;This is a market-wide resource capacity mechanism where all resource capacity required to ensure security of supply receives payment. These mechanisms are open for participation to all capacity resources contributing to adequacy.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A08")
    A_08("A08"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Strategic reserve resource capacity mechanism&lt;/Title&gt;
     *               &lt;Definition&gt;This is a market resource capacity mechanism that is kept outside of the electricity market and only used if the market participants do not offer enough generation to meet short-term demand.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A09")
    A_09("A09"),

    /**
     * 
     *             
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;CodeDescription xmlns:ecl="urn:entsoe.eu:wgedi:codelists" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     *               &lt;Title&gt;Other resource capacity mechanism&lt;/Title&gt;
     *               &lt;Definition&gt;This is any other kind of market resource capacity mechanism.&lt;/Definition&gt;
     *             &lt;/CodeDescription&gt;
     * </pre>
     * 
     *           
     * 
     */
    @XmlEnumValue("A10")
    A_10("A10");
    private final String value;

    StandardMarketProductTypeList(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StandardMarketProductTypeList fromValue(String v) {
        for (StandardMarketProductTypeList c: StandardMarketProductTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
